---
description: 
globs: 
alwaysApply: true
---

## 트리 구조
```
.
├── README.md
├── eslint.config.js
├── index.html
├── node_modules/
├── package.json
├── pnpm-lock.yaml
├── public/
├── src
│   ├── _mixins.scss  // 재사용 가능한 SCSS 믹스인 정의
│   ├── _variables.scss  //색상, 크기, 폰트 등의 기본 변수 정의
│   ├── assets
│   │   └── react.svg
│   ├── components
│   │   ├── 0.atoms
│   │   │   ├── Module1.module.scss
│   │   │   ├── Module1.tsx
│   │   ├── 1.molecules
│   │   │   ├── Footer.module.scss
│   │   │   ├── Footer.tsx
│   │   │   ├── Header.module.scss
│   │   │   └── Header.tsx
│   │   ├── 2.organisms
│   │   │   ├── Container.module.scss
│   │   │   └── Container.tsx
│   │   ├── 3.templates
│   │   │   └── Template.tsx
│   │   └── 4.pages
│   │       ├── Page.module.scss
│   │       └── Page.tsx
│   ├── global.d.ts
│   ├── global.scss   //전역 스타일 및 테마 설정
│   ├── hooks
│   │   └── useSomething.ts
│   ├── main.tsx
│   ├── types
│   │   └── type.ts
│   ├── utils
│   │   └── api.ts
│   └── vite-env.d.ts
├── tsconfig.app.json
├── tsconfig.json
├── tsconfig.node.json
└── vite.config.ts
```


## 프로젝트 구조
Apply to typescript.m...
```
src/
  ├── components/
  │   ├── 0.atoms/
  │   ├── 1.molecules/
  │   ├── 2.organisms/
  │   ├── 3.templates/
  │   └── 4.pages/
  ├── styles/
  │   └── main.scss
  ├── utils/
  ├── hooks/
  └── services/
```
## 규칙
컴포넌트 구조
- Atoms: 가장 기본적인 UI 요소로, 버튼, 입력 필드 등과 같은 단일 요소를 포함합니다.
- Molecules: 두 개 이상의 Atom이 결합된 컴포넌트로, 예를 들어 입력 필드와 레이블이 결합된 폼 그룹을 포함합니다.
- Organisms: 여러 개의 분자와 아톰이 결합된 복잡한 컴포넌트로, 예를 들어 네비게이션 바나 카드 레이아웃을 포함합니다.
- Templates: 페이지의 레이아웃을 정의하며, 여러 개의 유기체를 포함할 수 있습니다.
- Pages: 실제 페이지를 구성하며, 템플릿을 사용하여 페이지의 구조를 정의합니다.
## SCSS스타일링
모든 컴포넌트는 다음 전역 설정 파일을 참고하여 일관된 스타일을 유지해야 합니다:
- _variables.scss: 색상, 크기, 폰트 등의 기본 변수 정의
  - 라이트/다크 모드 색상 변수
  - 테마 변수 (기본값은 라이트 모드)
  - 크기 변수 (간격, 테두리 반경 등)
  - 폰트 설정
- _mixins.scss: 재사용 가능한 SCSS 믹스인 정의
  - 반응형 디자인 (respond-to)
  - 레이아웃 (flex-center)
  - 효과 (box-shadow)
- global.scss: 전역 스타일 및 테마 설정
  - CSS 변수 정의
  - 기본 요소 스타일링 (본문, 링크, 버튼 등)
  - 다크 모드 구현
새로운 스타일을 추가할 때는 가능한 한 이러한 전역 설정을 활용하여 디자인의 일관성을 유지해야 합니다. 컴포넌트별 스타일에서는 @use '../../_variables.scss' as *;와 @use '../../_mixins.scss' as *; 구문을 사용하여 전역 변수와 믹스인을 가져와 사용합니다.

모든 스타일은 SCSS 파일로 작성후 컴포넌트와 같은 폴더에 위치 합니다.
컴포넌트별로 스타일을 분리하여 유지보수를 용이하게 합니다.
공통 스타일은 main.scss에 정의하고, 필요한 경우 각 컴포넌트에서 import하여 사용합니다.
##  훅
Hooks: 커스텀 훅은 hooks/ 폴더에 작성하여 재사용성을 높입니다.
## 서비스
API 호출이나 데이터 관리를 위한 서비스는 utils/ 폴더에 작성합니다.
패키지 관리
패키지 관리는 pnpm을 사용하여 효율적으로 관리합니다.
모든 패키지는 package.json에 명시하고, pnpm-lock.yaml 파일을 통해 버전을 고정합니다.
